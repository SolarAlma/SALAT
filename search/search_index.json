{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SALAT: Solar ALMA Library of Auxiliary Tools","text":"<p>A collection of routines (programmed in both IDL and Python) for simple analysis/exploration of Solar ALMA data sets reduced with SoAP. Description of all codes, along with working examples, have been provided in this document. See each code's header for further explanations and keywords.</p> <p></p>"},{"location":"categories/","title":"Categories","text":""},{"location":"categories/#general-routines","title":"General Routines","text":"<p>Codes for, e.g., reading the ALMA fits cubes and their headers</p> <ul> <li> <code>SALAT_READ_FITSDATA</code></li> <li> <code>SALAT_ALMA_READFITSHEADER</code></li> </ul>"},{"location":"categories/#post-restorations","title":"Post Restorations","text":"<p>Codes which are applied on individual files outputted by SoAP to create 1. a single FITS cube (x,y,t), with necessary information in the header and as FITS extensions 2. identify and remove bad (broken) frames, i.e., 'clean cube' 3. polish the cube (to correct for temporal misalignments and/or effect of seeing on small part of the images) and create the level4 data (optional: smooth the cube with a boxcar window of 10 frames) 4. Convert intensity cubes to brightness temperature</p> <ul> <li> <code>SALAT_MAKE_ALMA_CUBE</code></li> <li> <code>SALAT_ALMA_POLISH_TSERIES</code></li> <li> <code>SALAT_ALMA_MODIFY_HEADER_AND_INFO</code></li> </ul>"},{"location":"categories/#simple-analysis","title":"Simple Analysis","text":"<p>Code for simple and quick exploration of the data.</p> <ul> <li> <code>SALAT_TELLURIC_TRANSMISSION</code></li> <li> <code>SALAT_MAKE_MOVIE</code></li> <li> <code>SALAT_COMBINE_SPECTRALWINDOWS</code></li> <li> <code>SALAT_ALMA_INT2BRTEMP</code></li> <li> <code>SALAT_ALMA_INTENSITY_TO_K</code></li> <li> <code>SALAT_ALMA_FILLGAPS</code></li> <li> <code>SALAT_CONTRAST</code></li> <li> <code>SALAT_FITS2CRISPEX</code></li> </ul>"},{"location":"citation/","title":"How to Cite SALAT","text":"<p>If you use SALAT in your research, please cite it as</p> <ul> <li>Jafarzadeh, S., Guevara G\u00f3mez, J. C., Wedemeyer, S., Aannerud, S. 2021, SolarAlma/SALAT: DOI 10.5281/zenodo.5466872</li> </ul> <p>Additionally, please cite the following article, if you use a SALSA dataset and/or the SALAT library.</p> <ul> <li>Henriques, V. M. J., Jafarzadeh, S., Guevara G\u00f3mez, J. C., Eklund, H., Wedemeyer, S., Szydlarski, M., Haugan, S. V. H., Mohan, A., 2022, Astronomy &amp; Astrophysics, 659, A31 </li> </ul> <p><pre><code>@ARTICLE{2022A&amp;A...659A..31H,\n     author = {{Henriques}, Vasco M.~J. and {Jafarzadeh}, Shahin and {Guevara G{\\'o}mez}, Juan Camilo and {Eklund}, Henrik and {Wedemeyer}, Sven and {Szydlarski}, Miko{\\l}aj and {Haugan}, Stein Vidar H. and {Mohan}, Atul},\n      title = \"{The Solar ALMA Science Archive (SALSA). First release, SALAT, and FITS header standard}\",\n      journal = {\\aap},\n      keywords = {Sun: chromosphere, Sun: general, radio continuum: general, Astrophysics - Solar and Stellar Astrophysics, Astrophysics - Instrumentation and Methods for Astrophysics},\n      year = 2022,\n      month = mar,\n      volume = {659},\n      eid = {A31},\n      pages = {A31},\n      doi = {10.1051/0004-6361/202142291},\n      archivePrefix = {arXiv},\n      eprint = {2109.02374},\n      primaryClass = {astro-ph.SR},\n      adsurl = {https://ui.adsabs.harvard.edu/abs/2022A&amp;A...659A..31H},\n      adsnote = {Provided by the SAO/NASA Astrophysics Data System}\n}\n</code></pre> </p> <p> </p>"},{"location":"idl/","title":"IDL","text":"<p>SALAT_READ</p> <p>Reads in a SALSA level4 FITS cubes and provides information about the cube's dimension and other parameters stored as extensions, such as arrays of observing time, beam's size and angle. <pre><code>IDL&gt; alma = salat_read(cube, header=header, time=time, beam_major=beam_major, beam_minor=beam_minor, beam_angle=beam_angle)\n</code></pre></p> <p>SALAT_READ_HEADER</p> <p>Reads in a SALSA level4 FITS cubes and outputs selected important header's parameters with meaningful names as a structure. <pre><code>IDL&gt; alma_header = salat_read_header(cube)\n</code></pre></p> <p>SALAT_STATS</p> <p>Reads in a SALSA level4 FITS cubes and outputs basic statistics of the data cube (or a frame) as a structure and print them in terminal (optional). A histogram is also plotted (optional) <pre><code>IDL&gt; result = salat_stats(cube, /histogram)\n</code></pre></p> <p>SALAT_TIMELINE</p> <p>Displays a timeline with missing frames and calibration gaps and outputs corresponding info (time indices) <pre><code>IDL&gt; result = salat_timeline(cube)\n</code></pre></p> <p>SALAT_INFO</p> <p>Prints some relevant information about the data cube in terminal <pre><code>IDL&gt; salat_info, cube\n</code></pre></p> <p>SALAT_PLOT_MAP</p> <p>Plot a map with optional features: color legend, synthesised beam etc. and save images as JPG or PNG files (optional). <pre><code>IDL&gt; salat_plot_map, cube\n</code></pre></p> <p>SALAT_BEAM_STATS</p> <p>Print statistics aboout synthesised beam and plot variation of the beam parameters with time. <pre><code>IDL&gt; salat_beam_stats, cube\n</code></pre></p> <p>SALAT_CONTRAST</p> <p>Compute and plot \"mean intensity\" and \"rms intensity contrast\" of a cube and indicate bad/good frames based on a given threshold. Gaps (due to ALMA calibration routines) are marked with Red dashed lines. <pre><code>IDL&gt; bestframe = salat_contrast(cube, limit=limit, badframes=badframes, goodframes=goodframes)\n</code></pre></p> <p>SALAT_CONVOLVE_BEAM</p> <p>Convolve a specified synthetic beam (from an ALMA observations) to a user-provided map (e.g. from a simulation or observations with other instruments) <pre><code>IDL&gt; convolved_cube = salat_convolve_beam(data, beam)\n</code></pre></p> <p>SALAT_SALSA_TO_CRISPEX</p> <p>Create a CRISPEX cube from the ALMA fits cube (3D, 4D, or 5D) for quick inspections using the CRISPEX tool <pre><code>IDL&gt; salat_salsa_to_crispex, cube, savedir=savedir\n</code></pre></p> <p>SALAT_PREP_DATA</p> <p>Take a standard SALSA level 4 cube and convert it such that it is accepted by external viewers, such as CARTA. <pre><code>IDL&gt; salat_prep_data, cube, savedir=savedir\n</code></pre></p>"},{"location":"installation/","title":"Installation","text":"<p>Install via git. The package requires IDL version &gt; 8 and Python version &gt; 3.</p> <pre><code>git clone https://github.com/SolarAlma/SALAT\n</code></pre> <p>Update an existing installation to the newest version via:</p> <p><pre><code>cd SALAT\ngit pull\n</code></pre> Install via direct download. Alternatively, the SALAT package can be downloaded as a zip file. This way, the latest version should be downloaded and replaced with the older one manually. Please note the version of the packages and be aware that the routines are updated regularly.</p> <p>Installation issues</p> <p>Please let us know if you encounter any issues and/or if any tricks required, so we can add them here!</p> <p>IDL</p> <p>Add the <code>SALAT/idl</code> location to your IDL path (see here or here for tips on setting your IDL path).</p> <p>To test the successful installation, start IDL in, e.g., your home directory: <pre><code>IDL&gt; .r salat\n</code></pre></p> <p>The package is successfully installed if the following is printed:</p> <pre><code>Solar Alma Library of Auxiliary Tools (SALAT) \nSALAT v1.1\n</code></pre> <p>Python</p> <p>Download the salat.py and save it in the folder you want to work in. Then, just follow examples</p>"},{"location":"python/","title":"Python","text":"<p>A notebook tutorial can be also downloaded here or revised online here </p> <p>SALAT_READ</p> <p>Reads in a SALSA level4 FITS cubes and provides information about the cube's dimension and other parameters stored as extensions, such as arrays of observing time, beam's size and angle. <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; almacube,header,timesec,timeutc,beammajor,beamminor,beamangle = salat.read(file,timeout=True,beamout=True,HEADER=True,SILENT=False,fillNan=False)\n</code></pre></p> <p>SALAT_READ_HEADER</p> <p>Reads in a SALSA level4 FITS cubes and outputs selected important header's parameters with meaningful names as a structure (default). These are also printed in terminal (unless otherwise omitted). All header parameters or the most important parameters with their original name tags can also be outputted (optional). Optionally, the original header is returned.   <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; hdr = salat.read_header(file,)\n</code></pre></p> <p>SALAT_STATS</p> <p>Reads in a SALSA level4 FITS cubes and outputs basic statistics of the data cube (or a frame) as a dictionary and print them in terminal (optional). A histogram is also plotted (optional) <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; datastats = salat.stats(almadata,Histogram=True,)\n</code></pre></p> <p>SALAT_TIMELINE</p> <p>Displays a timeline with missing frames and calibration gaps and outputs corresponding info (time indices) <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; scans_idxs,mfram_idxs = salat.timeline(timesec,gap=30)\n</code></pre></p> <p>SALAT_INFO</p> <p>Prints some relevant information about the data cube in terminal. <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; salat.info(file)\n</code></pre></p> <p>SALAT_PLOT_MAP</p> <p>This function makes map plot centered at (0,0) arcsec, save images as JPG or PNG files (optional). <pre><code>&gt;&gt;&gt; import salat\n#Plot map timestp=100 using colormap='jet' ans saving as jpg\n&gt;&gt;&gt; salat.plot_map(almadata,beam,pxsize,cmap='jet',average=False,timestp=100,savepng=False,savejpg=True,outputpath=\"./\")\n</code></pre></p> <p>SALAT_BEAM_STATS</p> <p>Print statistics aboout synthesised beam and plot variation of the beam parameters with time. <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; salat.beam_stats(beammajor1,beamminor1,beamangle1,timesec1,plot=True)\n</code></pre></p> <p>SALAT_CONTRAST</p> <p>Compute and plot \"mean intensity\" and \"rms intensity contrast\" of a cube and indicate bad/good frames based on a given threshold.  <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; bfrs = salat.contrast(almacube,timesec,show_best=True)\n</code></pre></p> <p>SALAT_CONVOLVE_BEAM</p> <p>Convolve a specified synthetic beam (from an ALMA observations) to a user-provided map (e.g. from a simulation or observations with other instruments).  <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; convolve_image = salat.convolve_beam(data,[beammajor1,beamminor1,beamangle1],pxsize=pxsize)\n</code></pre></p> <p>SALAT_PREP_DATA</p> <p>Take a standard SALSA level 4 cube and convert it such that it is accepted by external viewers, such as CARTA. This involves removal of empty dimensions or - if all 5 dimensions are in use - removing a dimension as selected by the user. Right now: Reduce dimensions. <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; salat.prep_data(file)\n</code></pre></p>"},{"location":"idl/salat_beam_stats/","title":"SALAT_BEAM_STATS","text":"<p>SALAT_BEAM_STATS</p> <p>Print statistics aboout synthesised beam and plot variation of the beam parameters with time.</p> <p>CALLING SEQUENCE: <pre><code>IDL&gt; salat_beam_stats, cube\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status <code>CUBE</code> The SALSA cube in FITS format <code>required</code> OUTPUTS Parameter Description <code>N/A</code> The plotted statistics. EXAMPLE <pre><code>IDL&gt; cube = './solaralma.b3.fba.20161222_141931-150707.2016.1.00423.S.level4.k.fits'\nIDL&gt; salat_beam_stats, cube\n ----------------------------------------------\n |  Beam Statistics:\n ----------------------------------------------\n |  -- Major axis (arcsec):\n |  Min = 2.03014\n |  Max = 2.18938\n |  Median = 2.10207\n |\n |  -- Minor axis (arcsec):\n |  Min = 1.35839\n |  Max = 1.37406\n |  Median = 1.36777\n |\n |  -- Angle (degrees):\n |  Min = 67.0412\n |  Max = 68.9073\n |  Median = 68.1305\n ----------------------------------------------\n</code></pre> <p></p> <p>Source code</p> <p>Back to the list of IDL Routines</p>"},{"location":"idl/salat_contrast/","title":"SALAT_CONTRAST","text":"<p>SALAT_CONTRAST</p> <p>Compute and plot \"mean intensity\" and \"rms intensity contrast\" of a cube and indicate bad/good frames based on a given threshold. Gaps (due to ALMA calibration routines) are marked with Red dashed lines.</p> <p>CALLING SEQUENCE: <pre><code>IDL&gt; bestframe = salat_contrast(cube, limit=limit, badframes=badframes, goodframes=goodframes)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status <code>CUBE</code> The ALMA FITS cube in [x,y,t] format. <code>required</code> <code>SHOW_BEST</code> If set, location of the best frame (i.e., that with the largest rms contrast) is indicated on the plot. <code>optional</code> <code>TITLE</code> It should be set if the cube is a fits file. <code>optional</code> <code>SIDE</code> Number of pixels to be excluded from sides of the field of view prior to calculations of the mean intensity and rms contrast. <code>optional</code> OUTPUTS Parameter Description <code>BESTFRAME</code> Index of the best frame (i.e., that with the largest rms contrast). <code>TIME_INDEX</code> Name of a variable for the frame indices sorted from the highest to lowest rms-intensity-contrast image EXAMPLE <p>Reading the data, header, time, and beam information from a SALSA data cube: <pre><code>IDL&gt; cube = './solaralma.b3.fba.20161222_141931-150707.2016.1.00423.S.level4.k.fits'\nIDL&gt; bestframe = salat_contrast(cube, /show_best, time_index=time_index)\n -- Variation of mean brightness (imean): -0.44 %\n -- Variation of rms intensity contrast (rmsCont): -11.07 %\nIDL&gt; im = readfits(cube)\nIDL&gt; best_ten_frames_cube = im[*,*,time_index[0:9]]\n</code></pre></p> <p></p> <p>Source code</p> <p>Back to the list of IDL Routines</p>"},{"location":"idl/salat_convolve_beam/","title":"SALAT_CONVOLVE_BEAM","text":"<p>SALAT_CONVOLVE_BEAM</p> <p>Convolve a specified synthetic beam (from an ALMA observations) to a user-provided map  (e.g. from a simulation or observations with other instruments)</p> <p>CALLING SEQUENCE: <pre><code>IDL&gt; convolved_cube = salat_convolve_beam(data, beam)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status <code>DATA</code> A Cube or a frame (in FITS format; as a string) to be convolved with the ALMA beam <code>required</code> <code>PIXEL_SIZE</code> The pixel size (i.e., sampling resolution) of the DATA (in arcsec). <code>required</code> <code>BEAM</code> Beam parameters [major_axis, minor_axis, beam_angle] all in degrees. It can be a 3-element array (i.e., mean of the beam parameters), or  a [3,nt] array for a time series (i.e., time-varying parameters). If the latter, then nt (numebr of frames) should be equal to that in the DATA cube. <code>required</code> <code>ALMA_CUBE</code> The SALSA level4 data cube in FITS format. If provided, the beam parameters are extracted from this cube (i.e., the BEAM keyword is ignored). <code>optional</code> OUTPUTS Parameter Description <code>CONVOLVED</code> Convolved Data cube or frame (same size as input DATA) EXAMPLE <pre><code>IDL&gt; data = './bifrost_b3_frame400.fits'\nIDL&gt; pixel_size = 0.066 ; arcsec\nIDL&gt; alma_cube = './solaralma.b3.fba.20161222_141931-150707.2016.1.00423.S.level4.k.fits'\nIDL&gt; convolved = salat_convolve_beam(data, pixel_size=pixel_size, alma_cube=alma_cube)\nIDL&gt; sjim, data, /fits, w=4, iris='FUV', title='original input image'\nIDL&gt; sjim, convolved, w=6, iris='FUV', title='convolved image'\n</code></pre> <p>Source code</p> <p>Back to the list of IDL Routines</p>"},{"location":"idl/salat_info/","title":"SALAT_INFO","text":"<p>SALAT_INFO</p> <p>Prints some relevant information about the data cube in terminal</p> <p>CALLING SEQUENCE: <pre><code>IDL&gt; salat_info, cube\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status <code>CUBE</code> The SALSA cube in FITS format <code>required</code> OUTPUTS Parameter Description <code>N/A</code> Information printed in terminal only. EXAMPLE <pre><code>IDL&gt; cube = './solaralma.b3.fba.20161222_141931-150707.2016.1.00423.S.level4.k.fits'\nIDL&gt; salat_info, cube\n--------------------------------------------------\n |  Info:\n --------------------------------------------------\n |  ALMA Band: BAND3\n |  Time of observations: 2016-12-22T14:19:36.623999\n |  ALMA Project ID: 2016.1.00423.S\n |  Pixel size (arcsec): 0.32000000\n |  Beam average (arcsec): 1.73409\n |  FOV diameter (arcsec): notcomputed\n --------------------------------------------------\n |  Data range:\n --------------------------------------------------\n |  Min (K): 4573.09\n |  Max (K): 10635.5\n --------------------------------------------------\n</code></pre> <p>Source code</p> <p>Back to the list of IDL Routines</p>"},{"location":"idl/salat_plot_map/","title":"SALAT_PLOT_MAP","text":"<p>SALAT_PLOT_MAP</p> <p>Plot a map with optional features: color legend, synthesised beam etc. and save images as JPG or PNG files (optional).</p> <p>CALLING SEQUENCE: <pre><code>IDL&gt; salat_plot_map, cube\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status <code>CUBE</code> The SALSA cube in FITS format <code>required</code> <code>COLOR_LEGEND</code> If set, a colorbar is also plotted <code>optional</code> <code>BEAM</code> If set, the beam shape/size is also depicted <code>optional</code> <code>AVERAGE</code> If set, average of the entire time series is plotted <code>optional</code> <code>TIMESTEP</code> The index of a frame to be plotted. If set, no movie is plotted. <code>optional</code> <code>SAVEDIR</code> A directory's location in which images are stored. <code>optional</code> <code>JPG</code> If SAVEDIR is defined, type of the stored image(s) is JPG <code>optional</code> <code>PNG</code> If SAVEDIR is defined, type of the stored image(s) is PNG (default) <code>optional</code> <code>CLOCK</code> If set, a clock displaying the observing time(s) is plotted <code>optional</code> OUTPUTS Parameter Description <code>N/A</code> The plotted image or the time series as a movie and optionally save them as JPG (or PNG) EXAMPLE <pre><code>IDL&gt; cube = './solaralma.b3.fba.20161222_141931-150707.2016.1.00423.S.level4.k.fits'\nIDL&gt; salat_plot_map, cube, /color_legend, /beam, /clock\n</code></pre> <p></p> <p>Source code</p> <p>Back to the list of IDL Routines</p>"},{"location":"idl/salat_prep_data/","title":"SALAT_PREP_DATA","text":"<p>SALAT_PREP_DATA</p> <p>Take a standard SALSA level 4 cube and convert it such that it is accepted by external viewers, such as CARTA. This involves removal of empty dimensions or - if all 5 dimensions are in use - removing a dimension as selected by the user. Right now: Reduce dimensions.</p> <p>CALLING SEQUENCE: <pre><code>IDL&gt; alma = salat_read(cube, header=header, time=time, beam_major=beam_major, beam_minor=beam_minor, beam_angle=beam_angle)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status <code>CUBE</code> The SALSA cube in FITS format. <code>required</code> <code>SAVEDIR</code> A directory (as a string) in where the new cube is stored (default = './') <code>optional</code> OUTPUTS Parameter Description <code>N/A</code> The SALSA cube as an array. Information about dimension is printed in terminal. The new cube stored in the given location (i.e., SAVEDIR) with the same name as the input CUBE, but with a '_modified-dimension' added. All headers and extensions are passed to the new cube without any changes. EXAMPLE <pre><code>IDL&gt; cube = './solaralma.b3.fba.2016-12-22.14_19_31-15_07_07.2016.1.00423.S.level4.k.fits'\nIDL&gt; salat_prep_data, cube, savedir='~/'\n</code></pre> <p>Source code</p> <p>Back to the list of IDL Routines</p>"},{"location":"idl/salat_read/","title":"SALAT_READ","text":"<p>SALAT_READ</p> <p>Reads in a SALSA level4 FITS cubes and provides information about the cube's dimension and other parameters stored as extensions, such as arrays of observing time, beam's size and angle. The SALSA datacubes have the following dimensions: [spatial (x), spatial (y), frequency (f), Stokes (s), time (t)]. Thus, depending on the availability of full spectra and/or Stokes parameters, the cube may have 3-5 dimensions.</p> <p>CALLING SEQUENCE: <pre><code>IDL&gt; alma = salat_read(cube, header=header, time=time, beam_major=beam_major, beam_minor=beam_minor, beam_angle=beam_angle)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status <code>CUBE</code> Path to the SALSA cube in FITS format. <code>required</code> <code>NAN_VALUE</code> User defined value to replace all NaN values (outside the science field of view). <code>optional</code> <code>NAN_MEDIAN</code> If set, the NaN values are replaced with the median of the entire data cube. Overrides NAN_VALUE if both are set. <code>optional</code> <code>SILENT</code> If set, no information is printed to the terminal. <code>optional</code> OUTPUTS Parameter Description <code>ALMA</code> The SALSA cube as an array. Information about dimension is printed in terminal. <code>HEADER</code> Name of a an IDL structure to store header of the FITS cube (calls salat_load_header.pro). By default, the most important header's parameters with meaningful tag names are outputted as a structure. Extra keywords: add /all for all parameters in the header, and/or /original for their original tag names/abbreviations <code>TIME</code> Name of a variable for observing time, in seconds from UTC midnight (<code>optional</code>) <code>BEAM_MAJOR</code> Name of a variable for Major axis of the beam (i.e., ALMA's sampling beam) in degrees (<code>optional</code>) <code>BEAM_MINOR</code> Name of a variable for Minor axis of the beam in degrees (<code>optional</code>) <code>BEAM_ANGLE</code> Name of a variable for Angle of the beam (in degrees) which is defined as angle of the Sun with respect to the north celestial pole, i.e. the \u2018position angle\u2019 (<code>optional</code>) EXAMPLE <p>Reading the data, header, time, and beam information from a SALSA data cube: <pre><code>IDL&gt; cube = './solaralma.b3.fba.20161222_141931-150707.2016.1.00423.S.level4.k.fits'\nIDL&gt; alma = salat_read(cube, header=header, time=time, beam_major=beam_major, beam_minor=beam_minor, beam_angle=beam_angle)\n... data cube dimension: 3D [x,y,time]\n... data set of dimensions x,y: 320,320\n... number of frames: 1200\nIDL&gt; help, header\n** Structure &lt;231ecc8&gt;, 136 tags, length=3840, data length=3803, refs=1:\n   SIMPLE          BOOLEAN   true (1)\n   BITPIX          LONG               -64\n   NAXIS           LONG                 5\n   NAXIS1          LONG               320\n   ...         ...            ...\nIDL&gt; help, time, beam_major, beam_minor, beam_angle\nTIME            FLOAT     = Array[1200]\nBEAM_MAJOR      FLOAT     = Array[1200]\nBEAM_MINOR      FLOAT     = Array[1200]\nBEAM_ANGLE      FLOAT     = Array[1200]\n</code></pre></p> <p>Source code</p> <p>Back to the list of IDL Routines</p>"},{"location":"idl/salat_read_header/","title":"SALAT_READ_HEADER","text":"<p>SALAT_READ_HEADER</p> <p>Reads in a SALSA level4 FITS cubes and outputs selected important header's parameters with meaningful names as a structure (default). These are also printed in terminal (unless otherwise omitted). All header parameters or the most important parameters with their original name tags can also be  outputted (optional). In all cases, the outputted structure also includes the original header as a string (at the end of the structure)</p> <p>CALLING SEQUENCE: <pre><code>IDL&gt; alma_header = salat_read_header(cube)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status <code>CUBE</code> The SALSA data cube in FITS format (if the header is not provided) <code>required</code> <code>HEADER</code> The header of the SALSA cube (if specified, then the CUBE is ignored) <code>required</code> <code>SILENT</code> If set, no information (i.e., selected important header's parameters) is printed in terminal. <code>optional</code> <code>ORIGINAL</code> If set, the selected important header's parameters are returned with their original name (abbreviation). Otherwise, they are returned with meaningful names (by default) <code>optional</code> <code>ALL</code> If set, all parameters from the header (with their original tag names) are outputted into the structure. If set, other cases are ignored (i.e., the selected important header's parameters are not outputted). <code>optional</code> OUTPUTS Parameter Description <code>HEADER</code> The header parameters as a structure EXAMPLE <pre><code>IDL&gt; cube = './solaralma.b3.fba.20161222_141931-150707.2016.1.00423.S.level4.k.fits'\nIDL&gt; header_structure = salat_read_header(cube)\n -----------------------------------------------------------\n |  Selected parameters from the header:\n -----------------------------------------------------------\n |  Time of observations: 2016-12-22T14:19:36.623999\n |  ALMA Band: BAND3\n |  ALMA Project ID: 2016.1.00423.S\n |  Solar x (arcsec) ~ -0.0010000000\n |  Solar y (arcsec) ~ 0.0010000000\n |  Pixel size (arcsec): 0.32000000\n |  Mean of major axis of beam (deg): 0.00058374900\n |  Mean of minor axis of beam (deg): 0.00037963300\n |  Mean of beam angle (deg): 0.00058374900\n |  Frequency (Hz): 9.9990726e+10\n |  Water Vapour: 1.59800\n -----------------------------------------------------------\nIDL&gt; help, header_structure\n** Structure &lt;29afb58&gt;, 18 tags, length=2512, data length=2501, refs=1:\n   SIMPLE          BOOLEAN   true (1)\n   MAJOR_BEAM_MEAN DOUBLE       0.00058374900\n   MINOR_BEAM_MEAN DOUBLE       0.00037963300\n   BEAM_ANGLE_MEAN DOUBLE           71.311844\n   ...         ...            ...\nIDL&gt; pixel_size = header_structure.pixel_size\n</code></pre> <p>Source code</p> <p>Back to the list of IDL Routines</p>"},{"location":"idl/salat_salsa_to_crispex/","title":"SALAT_SALSA_TO_CRISPEX","text":"<p>SALAT_SALSA_TO_CRISPEX</p> <p>Create a CRISPEX cube from the ALMA fits cube (3D, 4D, or 5D) for quick inspections using the CRISPEX tool. Note: the CRISPEX tool should be installed separately (https://github.com/grviss/crispex)</p> <p>CALLING SEQUENCE: <pre><code>IDL&gt; salat_salsa_to_crispex, cube, savedir=savedir\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status <code>CUBE</code> The SALSA cube in FITS format. <code>required</code> <code>SAVEDIR</code> A directory (as a string) in where the CRISPEX (.fcube) file is stored (default = './') <code>optional</code> OUTPUTS Parameter Description <code>N/A</code> The CRISPEX cube (.fcube) stored in the given location (i.e., SAVEDIR), with the same name as the input CUBE. EXAMPLE <pre><code>IDL&gt; cube = './solaralma.b3.fba.2016-12-22.14_19_31-15_07_07.2016.1.00423.S.level4.k.fits'\nIDL&gt; salat_salsa_to_crispex, cube, savedir='~/'\nIDL&gt; crispex, '~/solaralma.b3.fba.2016-12-22.14_19_31-15_07_07.2016.1.00423.S.level4.k.fcube'\n</code></pre> <p>Source code</p> <p>Back to the list of IDL Routines</p>"},{"location":"idl/salat_stats/","title":"SALAT_STATS","text":"<p>SALAT_STATS</p> <p>Reads in a SALSA level4 FITS cubes and outputs basic statistics of the data cube (or a frame) as a structure and print them in terminal (optional). A histogram is also plotted (optional)</p> <p>CALLING SEQUENCE: <pre><code>IDL&gt; result = salat_stats(cube, /histogram)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status <code>CUBE</code> The SALSA data cube in FITS format <code>required</code> <code>FRAME</code> The frame number for which the statistics are calculated (if not set, they are measured for the entire time series) <code>optional</code> <code>SILENT</code> If set, no information is printed in terminal <code>optional</code> <code>HISTOGRAM</code> If set, a histogram is also plotted (i.e., brightness temperature distribution of the data cube or a frame) <code>optional</code> OUTPUTS Parameter Description <code>STATS</code> Statistics parameters as a structure EXAMPLE <pre><code>IDL&gt; cube = './solaralma.b3.fba.20161222_141931-150707.2016.1.00423.S.level4.k.fits'\nIDL&gt; result = salat_stats(cube, /histogram)\n ----------------------------------------------\n |  Statistics (data unit: K):\n ----------------------------------------------\n |  Array size:  x = 320  y = 320  t = 1200\n |  Number of data points = 122880000\n |  Min = 4573.0864\n |  Max = 10635.463\n |  Mean = 7387.2971\n |  Median = 7326.9473\n |  Mode = 7299.1414\n |  Standard deviation = 518.84095\n |  Variance = 269195.93\n |  Skew = 0.55234913\n |  Kurtosis = 0.78927953\n |  Percentile1 (value range between the 1st and 99th percentile)= 6318.5532 - 8812.2432\n |  Percentile5 (value range between the 5th and 95th percentile)= 6645.1826 - 8361.0938\n ----------------------------------------------\nIDL&gt; help, result\n** Structure &lt;29aff18&gt;, 11 tags, length=104, data length=104, refs=1:\n   MIN             DOUBLE           4573.0864\n   MAX             DOUBLE           10635.463\n   MEAN            DOUBLE           7387.2971\n   MEDIAN          DOUBLE           7326.9473\n   ...         ...            ...\n</code></pre> <p> </p> <p>Source code</p> <p>Back to the list of IDL Routines</p>"},{"location":"idl/salat_timeline/","title":"SALAT_TIMELINE","text":"<p>SALAT_TIMELINE</p> <p>Displays a timeline with missing frames and calibration gaps and outputs corresponding info (time indices)</p> <p>CALLING SEQUENCE: <pre><code>IDL&gt; result = salat_timeline(cube)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status <code>CUBE</code> The SALSA data cube in FITS format <code>required</code> <code>GAP</code> Time difference in seconds that will be considered a gap (missing frames). Default: cadence*1.5 <code>optional</code> <code>TIME</code> Name of a variable for observing time, in seconds from UTC midnight. format: float <code>optional</code> <code>STIME</code> Name of a variable for observing time in UTC (optional). format: string <code>optional</code> OUTPUTS Parameter Description <code>RESULT</code> Time index ranges of consequent sequences in the form of (n,2), where n is the number of consequent sequences. EXAMPLE <pre><code>IDL&gt; cube = './solaralma.b3.fba.20161222_141931-150707.2016.1.00423.S.level4.k.fits'\nIDL&gt; result = salat_timeline(cube, time=time, stime=stime)\nIDL&gt; help, time, stime\nTIME            FLOAT     = Array[1200]\nSTIME           STRING    = Array[1200]\nIDL&gt; print, time[result[0,1]], time[result[1,0]] ; time interval of first gap (if any)\n      51871.0      51874.5\n</code></pre> <p></p> <p>Source code</p> <p>Back to the list of IDL Routines</p>"},{"location":"python/salat_beam_stats/","title":"SALAT_BEAM_STATS","text":"<p>SALAT_BEAM_STATS</p> <p>Print statistics aboout synthesised beam and plot variation of the beam parameters with time.</p> <p>CALLING SEQUENCE: <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; salat.beam_stats(beammajor1,beamminor1,beamangle1,timesec1,plot=True)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status Default <code>beammajor</code> Beam major array from \"salat_read\". <code>required</code> <code>beamminor</code> Beam minor array from \"salat_read\". <code>required</code> <code>beamangle</code> Beam angle array from \"salat_read\". <code>required</code> <code>timesec</code> Timesec array from \"salat_read\" <code>required</code> <code>plot</code> If <code>True</code>, plot beam area change on time. <code>optional</code> <code>False</code> OUTPUTS Parameter Description <code>N/A</code> Information printed in terminal. <code>fig</code> If <code>plot=True</code>. EXAMPLE <p><pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; salat.beam_stats(beammajor1,beamminor1,beamangle1,timesec1,plot=True)\n</code></pre> <pre><code>---------------------------------------------------\n------------ SALAT BEAM STATS part of -------------\n-- Solar Alma Library of Auxiliary Tools (SALAT) --\nComputing Statistics\n---------------------------------------------------\n----------------------------------------------\n|  Beam Statistics: \n----------------------------------------------\n|  Min (major,minor,angle,area) =  (2.0301436772570014, 1.3583892490714788, 67.04122, 2.1699882237884673)\n|  Max (major,minor,angle,area) =  (2.1893782541155815, 1.3740585884079337, 68.90729, 2.3556596243785903)\n|  Mean (major,minor,angle,area) =  (2.101498652540613, 1.3666819556965493, 68.04936, 2.2558125338146087)\n|  Median (major,minor,angle,area) =  (2.097920689266175, 1.367768389172852, 68.129944, 2.252857507134082)\n|  Standard deviation (major,minor,angle,area) =  (0.046229713450479264, 0.004009421305141309, 0.5219541, 0.05374611320453778)\n----------------------------------------------\n</code></pre> </p> <p>Source code</p> <p>Back to the list of Python functions</p>"},{"location":"python/salat_contrast/","title":"SALAT_CONTRAST","text":"<p>SALAT_CONTRAST</p> <p>Compute and plot \"mean intensity\" and \"rms intensity contrast\" of a cube and indicate bad/good frames based on a given threshold. Gaps (due to ALMA calibration routines) are marked with Red dashed lines.</p> <p>CALLING SEQUENCE: <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; bfrs = salat.contrast(almacube,timesec,show_best=True)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status Default <code>almadata</code> Datacube as array from \"salat_read\". It can be 2D and 3D <code>required</code> <code>timesec</code> Timesec array from \"salat_read\" <code>required</code> <code>side</code> Number of pixels to be excluded from sides of the field of view prior to calculations of the mean intensity and rms contrast. <code>required</code> <code>5</code> <code>show_best</code> If <code>True</code>, location of the best frame (i.e., that with the largest rms contrast) is indicated on the plot. <code>optional</code> <code>False</code> OUTPUTS Parameter Description <code>bestframes</code> Indexes of the best frames sorted (i.e., that with the largest rms contrast). <code>fig</code> A matplotlib plot is produced. EXAMPLE <p>Finding best frames and plotting RMS contrast for one cube <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; bfrs = salat.contrast(almacube,timesec,show_best=True)\n</code></pre> <pre><code>---------------------------------------------------\n------------ SALAT CONTRAST part of -------------\n-- Solar Alma Library of Auxiliary Tools (SALAT) --\n</code></pre> </p> <p>Source code</p> <p>Back to the list of Python functions</p>"},{"location":"python/salat_convolve_beam/","title":"SALAT_CONVOLVE_BEAM","text":"<p>SALAT_CONVOLVE_BEAM</p> <p>Convolve a specified synthetic beam (from an ALMA observations) to a user-provided map (e.g. from a simulation or observations with other instruments).</p> <p>CALLING SEQUENCE: <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; convolve_image = salat.convolve_beam(data,[beammajor1,beamminor1,beamangle1],pxsize=pxsize)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status Default <code>data</code> A frame in array format to be convolved with the ALMA beam. <code>required</code> <code>beam</code> A list containing the beam parameters as [bmaj,bmin,bang] \"salat_read\". <code>required</code> <code>pxsize</code> Pixel size in arcsec of the data to be convolved <code>required</code> OUTPUTS Parameter Description <code>data_convolved</code> The convolved image as array EXAMPLE <p>For this example a bifrost snapshot is used as input. Also, original and convolved images are plotted for comparision <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; import astropy.units as u\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import matplotlib.pyplot as plt\n&gt;&gt;&gt; import matplotlib\n&gt;&gt;&gt; from mpl_toolkits.axes_grid1 import make_axes_locatable\n&gt;&gt;&gt; filebifrost = path_folder + \"bifrost_b3_frame400.fits\"\n&gt;&gt;&gt; bifrostdata = fits.open(filebifrost)[0].data\n&gt;&gt;&gt; pxsizebifrost = 0.06 #This is assumed\n&gt;&gt;&gt; bifrostconv = salat.convolve_beam(bifrostdata,[beammajor1,beamminor1,beamangle1],pxsize=pxsizebifrost)\n</code></pre> <pre><code>------------------------------------------------------\n------------ SALAT CONVOLVE BEAM part of -------------\n---- Solar Alma Library of Auxiliary Tools (SALAT)----\nFor the input data, NANs are not properly handle\nPlease use fill_nans parameter when loading fits\n------------------------------------------------------\n</code></pre> <pre><code>#PLotting\nfig,ax = plt.subplots(ncols=2,figsize=(12,5),sharex=True,sharey=True)\nimorg = ax[0].imshow(bifrostdata,origin='lower',cmap='hot')\ndivider = make_axes_locatable(ax[0])\ncax = divider.append_axes('right', size='5%', pad=0.05)\ncb = fig.colorbar(imorg, cax=cax, orientation='vertical',label=r'Temperature [K]')\nimcon = ax[1].imshow(bifrostconv,origin='lower',cmap='hot')\ndivider = make_axes_locatable(ax[1])\ncax = divider.append_axes('right', size='5%', pad=0.05)\ncb = fig.colorbar(imorg, cax=cax, orientation='vertical',label=r'Temperature [K]')\nax[0].set_title(r'Original Bifrost')\nax[1].set_title(r'Convolved Bifrost')\nplt.tight_layout()      \n</code></pre> </p> <p>Source code</p> <p>Back to the list of Python functions</p>"},{"location":"python/salat_info/","title":"SALAT_INFO","text":"<p>SALAT_INFO</p> <p>Prints some relevant information about the data cube in terminal</p> <p>CALLING SEQUENCE: <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; salat.info(file)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status Default <code>file</code> Path to the SALSA cube in FITS format. <code>required</code> OUTPUTS Parameter Description <code>N/A</code> Information printed in terminal only. EXAMPLE <p><pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; salat.info(file)\n</code></pre> <pre><code>---------------------------------------------------\n--------------- SALAT INFO part of ----------------\n-- Solar Alma Library of Auxiliary Tools (SALAT) --\n----------------------------------------------\n| Data feat.: \n----------------------------------------------\n|  ALMA BAND:  3\n|  Obs. Date:  2016-12-22\n|  ALMA proj:  2016.1.00423.S\n|  Pix. Unit:  K\n|  Pix. Size:  0.32  arcsec.\n|  Beam mean:  6242.723999999999  arcsec\n|  FOV. diam:  notcomputed\n----------------------------------------------\n| Data range \n----------------------------------------------\n|  Min =  4573.09  Kelvin\n|  Max =  10635.5  Kelvin\n----------------------------------------------\n</code></pre></p> <p>Source code</p> <p>Back to the list of Python functions</p>"},{"location":"python/salat_plot_map/","title":"SALAT_PLOT_MAP","text":"<p>SALAT_PLOT_MAP</p> <p>This function makes map plot centered at (0,0) arcsec, save images as JPG or PNG files (optional).</p> <p>CALLING SEQUENCE: <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; salat.plot_map(almadata,beam,pxsize,cmap='hot',average=False,timestp=0,savepng=False,savejpg=False,outputpath=\"./\")\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status Default <code>almadata</code> Datacube as array from \"salat_read\". It can be 2D and 3D <code>required</code> <code>beam</code> List with beam info as <code>[bmaj,bmin,bang]</code> from \"salat_read\" <code>required</code> <code>pxsize</code> Pixelsize in arcsec from \"salat_header\" <code>required</code> <code>cmap</code> String of colormap name <code>optional</code> <code>hot</code> <code>average</code> If <code>True</code>, it plots the average image of a 3D cube <code>optional</code> <code>False</code> <code>timestp</code> Integer, index of frame for plotting <code>optional</code> <code>0</code> <code>savepng</code> If <code>True</code>, it saves image in path as PNG <code>optional</code> <code>False</code> <code>savejpg</code> If <code>True</code>, it saves image in path as JPG <code>optional</code> <code>False</code> <code>outputpath</code> Directory path to save image <code>optional</code> <code>./</code> OUTPUTS Parameter Description <code>fig</code> Matplotlib plot of map is produced. EXAMPLE <p><pre><code>&gt;&gt;&gt; import salat\n#Plot map timestp=100 using colormap='jet' ans saving as jpg\n&gt;&gt;&gt; salat.plot_map(almadata,beam,pxsize,cmap='jet',average=False,timestp=100,savepng=False,savejpg=True,outputpath=\"./\")\n</code></pre> <pre><code>---------------------------------------------------\n------------ SALAT PLOT MAP part of ---------------\n-- Solar Alma Library of Auxiliary Tools (SALAT) --\n</code></pre> </p> <p>Source code</p> <p>Back to the list of Python functions</p>"},{"location":"python/salat_prep_data/","title":"SALAT_PREP_DATA","text":"<p>SALAT_PREP_DATA</p> <p>Take a standard SALSA level 4 cube and convert it such that it is accepted by external viewers, such as CARTA. This involves removal of empty dimensions or - if all 5 dimensions are in use - removing a dimension as selected by the user. Right now: Reduce dimensions.</p> <p>CALLING SEQUENCE: <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; salat.prep_data(file)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status Default <code>file</code> Path to the SALSA cube in FITS format. <code>required</code> <code>savedir</code> Path to directory to save in <code>required</code> <code>./</code> OUTPUTS Parameter Description <code>N/A</code> The new cube stored in the given location (i.e., <code>savedir</code>) with the same name as the input CUBE, but with a '_modified-dimension' added. EXAMPLE <p><pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; salat.prep_data(file)\n</code></pre> <pre><code>------------------------------------------------------\n------------ SALAT PREP DATA part of -------------\n---- Solar Alma Library of Auxiliary Tools (SALAT)----\nDone!\n</code></pre></p> <p>Source code</p> <p>Back to the list of Python functions</p>"},{"location":"python/salat_read/","title":"SALAT_READ","text":"<p>SALAT_READ</p> <p>Reads in a SALSA level4 FITS cubes and provides information about the cube's dimension and other parameters stored as extensions,such as arrays of observing time, beam's size and angle. The SALSA datacubes have the following dimensions: [spatial (x), spatial (y), frequency (f), Stokes (s), time (t)]. When using Python, the dimensions are reversed: [time (t),Stokes (s),frequency (f)spatial (y),spatial (x)]. Thus, depending on the availability of full spectra and/or Stokes parameters, the cube may have 3-5 dimensions.</p> <p>CALLING SEQUENCE: <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; almacube,_,_,_,_,_,_ = salat.read(file)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status Default <code>file</code> Path to the SALSA cube in FITS format. <code>required</code> <code>fill_NAN</code> If <code>True</code>, user will be asked to enter value or to choose if wants to use Median. <code>optional</code> <code>False</code> <code>timeout</code> If <code>True</code>, it returns 2 1D array of time in seconds and in datetime format <code>optional</code> <code>False</code> <code>beamout</code> If <code>True</code>, it returns 3 arrays with beam major and minor axes and beam angle <code>optional</code> <code>False</code> <code>HEADER</code> If <code>True</code>, it returns the original header <code>optional</code> <code>True</code> <code>SILENT</code> If <code>True</code>, no information is printed to the terminal. <code>optional</code> <code>False</code> OUTPUTS Parameter Description <code>sqcubecrop</code> The SALSA cube as an array. Information about dimension is printed in terminal. (Squeezed and cropped ALMA cube with dimensions [t,x,y]) <code>hdr</code> Header as astropy.io.fits.header.Header <code>timesec</code> Array with time in seconds (0 s is start of observation) <code>timeutc</code> Array with time in UTC as datetime.datetime <code>beammajor</code> Name of a variable for Major axis of the beam (i.e., ALMA's sampling beam) in degrees <code>beaminor</code> Name of a variable for Minor axis of the beam in degrees <code>beamangle</code> Name of a variable for Angle of the beam (in degrees) which is defined as angle of the Sun with respect to the north celestial pole, i.e. the \u2018position angle\u2019 EXAMPLE <p>Reading the data, header, time, and beam information from a SALSA data cube, without filling Nans: <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; file = \"./solaralma.b3.fba.20161222_141931-150707.2016.1.00423.S.level4.k.fits\"\n&gt;&gt;&gt; almacube,header,timesec,timeutc,beammajor,beamminor,beamangle = salat.read(file,timeout=True,beamout=True,HEADER=True,SILENT=False,fillNan = False)\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1200/1200 [00:00&lt;00:00, 31689.21it/s]\n---------------------------------------------------\n--------------- SALAT READ part of ----------------\n-- Solar Alma Library of Auxiliary Tools (SALAT) --\nReading ALMA cube\n---------------------------------------------------\n--------------- SALAT INFO part of ----------------\n-- Solar Alma Library of Auxiliary Tools (SALAT) --\n\n----------------------------------------------\n| Data feat.: \n----------------------------------------------\n|  ALMA BAND:  3\n|  Obs. Date:  2016-12-22\n|  ALMA proj:  2016.1.00423.S\n|  Pix. Unit:  K\n|  Pix. Size:  0.32  arcsec.\n|  Beam mean:  6242.723999999999  arcsec\n|  FOV. diam:  notcomputed\n----------------------------------------------\n| Data range \n----------------------------------------------\n|  Min =  4573.09  Kelvin\n|  Max =  10635.5  Kelvin\n----------------------------------------------\nDone!\n</code></pre></p> <p>Source code</p> <p>Back to the list of Python functions</p>"},{"location":"python/salat_read_header/","title":"SALAT_READ_HEADER","text":"<p>SALAT_READ_HEADER</p> <p>Reads in a SALSA level4 FITS cubes and outputs selected important header's parameters with meaningful names as a structure (default). These are also printed in terminal (unless otherwise omitted). All header parameters or the most important parameters with their original name tags can also be outputted (optional). Optionally, the original header is returned. </p> <p>CALLING SEQUENCE: <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; hdr = salat.read_header(file,)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status Default <code>file</code> Path to the SALSA cube in FITS format. <code>required</code> <code>ALL</code> If <code>True</code>, original header as as astropy.io.fits.header.Header is returned. If <code>False</code>, header is returned as class structure depending of ORIGINAL parameters <code>optional</code> <code>False</code> <code>ORIGINAL</code> If <code>True</code>, header is returned as Nametuple structure preserving original keyword names. If <code>False</code>, header is returned as Nametuple structure new meaninful keywords. <code>optional</code> <code>False</code> <code>SILENT</code> If <code>True</code>, no information is printed to the terminal. <code>optional</code> <code>False</code> OUTPUTS Parameter Description <code>header</code> header is return depending of input parameters. When returned as NamedTuple Class variables can be accessed as header.varname EXAMPLE <p>There are 3 possible ways of obtaining the header. <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; #FITS header is read and pass to a Class structure with new meaningful keywords\n&gt;&gt;&gt; hdrmk = salat.read_header(file1,ALL=False,ORIGINAL=False,)\n&gt;&gt;&gt; print(\"Header with meaningful keywords\", hdrmk)\n&gt;&gt;&gt; print(\"Get Pixelsize (hdrmk.pixel_size): \",hdrmk.pixel_size)\n</code></pre> <pre><code>---------------------------------------------------\n------------ SALAT READ HEADER part of ------------\n-- Solar Alma Library of Auxiliary Tools (SALAT) --\n\n --------------------------------------------------\n |  Selected parameters from the header:\n --------------------------------------------------\n |  Time of observations:  2016-12-22T14:19:36.623999\n |  ALMA Band:  BAND3\n |  ALMA Project ID:  2016.1.00423.S\n |  Solar x (arcsec) ~  -0.001\n |  Solar y (arcsec) ~  0.001\n |  Pixel size (arcsec):  0.32\n |  Mean of major axis of beam (deg):  0.000583749\n |  Mean of minor axis of beam (deg):  0.000379633\n |  Mean of beam angle (deg):  0.000583749\n |  Frequency (Hz):  99990725896.68\n |  Water Vapour:  1.598\n ---------------------------------------------------\n\nHeader with meaningful keywords Header(major_beam_mean=0.000583749, minor_beam_mean=0.000379633, beam_angle_mean=71.31184387207, RA=271.2488635455, Dec=-25.42327076764, Frequency=99990725896.68, solarx=-0.001, solary=0.001, Rest_frequency=93000000000.1, DATE_OBS='2016-12-22T14:19:36.623999', ALMA_Band='BAND3', min_of_datacube=4573.09, max_of_datacube=10635.5, ALMA_project_id='2016.1.00423.S', water_vapour=1.598, pixel_size=0.32)\nGet Pixelsize (hdrmk.pixel_size):  0.32\n</code></pre> <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; #FITS header is read and pass to a Class structure with original keywords\n&gt;&gt;&gt; #SILENT=True to avoid printing\n&gt;&gt;&gt; hdrok = salat.read_header(file1,ALL=False,ORIGINAL=True,SILENT=True)\n&gt;&gt;&gt; print(\"Header with original keywords\",hdrok)\n&gt;&gt;&gt; print(\"Get Pixelsize (hdrok.CDELT1A): \",hdrok.CDELT1A)\n</code></pre> <pre><code>Header with original keywords Header(BMAJ=0.000583749, BMIN=0.000379633, BPA=71.31184387207, CRVAL1=271.2488635455, CRVAL2=-25.42327076764, CRVAL3=99990725896.68, CRVAL1A=-0.001, CRVAL2A=0.001, RESTFRQ=93000000000.1, DATE_OBS='2016-12-22T14:19:36.623999', INSTRUME='BAND3', DATAMIN=4573.09, DATAMAX=10635.5, PROPCODE='2016.1.00423.S', PWV=1.598, CDELT1A=0.32)\nGet Pixelsize (hdrok.CDELT1A):  0.32\n</code></pre> <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; #FITS header is read and returned in original format\n&gt;&gt;&gt; hdroh = salat.read_header(file1,ALL=True,SILENT=True)\n</code></pre></p> <p>Source code</p> <p>Back to the list of Python functions</p>"},{"location":"python/salat_stats/","title":"SALAT_STATS","text":"<p>SALAT_STATS</p> <p>Reads in a SALSA level4 FITS cubes and outputs basic statistics of the data cube (or a frame) as a dictionary and print them in terminal (optional). A histogram is also plotted (optional)</p> <p>CALLING SEQUENCE: <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; datastats = salat.stats(almadata,Histogram=True,)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status Default <code>almadata</code> Datacube as array from \"salat_read\". It can be 2D and 3D <code>required</code> <code>Histogram</code> If <code>True</code>, it plots a temperature distribution histogram <code>optional</code> <code>False</code> <code>SILENT</code> If <code>True</code>, no information is printed to the terminal. <code>optional</code> <code>False</code> OUTPUTS Parameter Description <code>datastats</code> Python dictionary with computed stats. <code>fig</code> A matplotlib histogram of temperature distribution is produced if <code>Histogram=True</code>. EXAMPLE <p><pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; datastats = salat.stats(almadata,Histogram=True,)\n</code></pre> <pre><code>---------------------------------------------------\n--------------- SALAT STATS part of ----------------\n-- Solar Alma Library of Auxiliary Tools (SALAT) --\nComputing Statistics\n----------------------------------------------\n----------------------------------------------\n|  Statistics: \n----------------------------------------------\n|  Array size: t = 1200 x = 213  y = 213\n|  Min =  4573.08642578125\n|  Max =  10635.462890625\n|  Mean =  7387.675114081175\n|  Median =  7327.32373046875\n|  Mode =  7305.5439453125\n|  Standard deviation =  518.919333625818\n|  Variance =  269277.274810663\n|  Skew =  0.5515735886224322\n|  Kurtosis =  0.7880637528361976\n|  Percentile 1 =  [6318.5185498  8812.49609375]\n|  Percentile 5 =  [6645.40478516 8361.46972656]\n----------------------------------------------\n</code></pre> </p> <p>Source code</p> <p>Back to the list of Python functions</p>"},{"location":"python/salat_timeline/","title":"SALAT_TIMELINE","text":"<p>SALAT_TIMELINE</p> <p>Displays a timeline with missing frames and calibration gaps and outputs corresponding info (time indices)</p> <p>CALLING SEQUENCE: <pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; scans_idxs,mfram_idxs = salat.timeline(timesec,gap=30)\n</code></pre></p> INPUTS / OPTIONAL KEYWORDS Option Description Status Default <code>timesec</code> Timesec array from \"salat_read\" <code>required</code> <code>gap</code> Time gap to considered two frames correspond to different scans <code>required</code> <code>30</code> OUTPUTS Parameter Description <code>scans_idx</code> Python dictionary with indexes for all scans in observation. <code>mfram_idx</code> Python dictionary with indixes of all consequent sequences. <code>fig</code> A matplotlib plot showing the timeline is produced. EXAMPLE <p><pre><code>&gt;&gt;&gt; import salat\n&gt;&gt;&gt; scans_idxs,mfram_idxs = salat.timeline(timesec,gap=30)\n&gt;&gt;&gt; print(\"Indexes scans: \", idxscans)\n&gt;&gt;&gt; print(\"Indexes consequent frames: \",idxcqfrs)\n</code></pre> <pre><code>---------------------------------------------------\n------------- SALAT TIME LINE part of -------------\n-- Solar Alma Library of Auxiliary Tools (SALAT) --\nIndexes scans:  {'Sc. 1': [0, 299], 'Sc. 2': [300, 599], 'Sc. 3': [600, 899], 'Sc. 4': [900, 1199]}\nIndexes consequent frames:  {'Sec. 1': [0, 149], 'Sec. 2': [150, 299], 'Sec. 3': [300, 449], 'Sec. 4': [450, 599], 'Sec. 5': [600, 749], 'Sec. 6': [750, 899], 'Sec. 7': [900, 1049], 'Sec. 8': [1050, 1199]}\n</code></pre> </p> <p>Source code</p> <p>Back to the list of Python functions</p>"}]}